#   Continuous Integration Pipeline
#   Uses: SonarCloud, GameCI, UnityTestRunner,
#   From: Mirage, SonarCloud, and Fathom7

name: CI
on:
  push:
    branches: [main, dev]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  LintProject:
    name: Lint Source Code
    runs-on: ubuntu-latest
    # available list of containers here:
    # https://hub.docker.com/r/unityci/editor/tags?page=1&ordering=last_updated&name=ubuntu-2020.1.17f1-base
    container: unityci/editor:ubuntu-2020.3.25f1-base-0.15
    env:
      DOTNET_ROOT: '/opt/unity/Editor/Data/NetCore/Sdk-2.2.107'

    steps:

      # First we need to grab the UnityLicense we uploaded as a Secret from the Workflow: UnityActivation
      - name: Activate Unity
        # exit code is 1 for manual activation
        continue-on-error: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |          
          echo "$UNITY_LICENSE" | tr -d '\r' > UnityLicenseFile.ulf
          unity-editor -nographics -logFile /dev/stdout -manualLicenseFile UnityLicenseFile.ulf -quit

      # Next checkout the project @ fetch-depth 0 for full history and LFS support
      - name: Checkout Repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 0
          lfs: true
      
      # Cache library for future speed for Analysis
      - name: Cache Library
        id: cache-library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-2020.3.25
          
      - name: Cache SonarCloud Packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud Scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Install dotnet version of the SonarScanner tool via SonarCloud
      - name: Install Sonar Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          $DOTNET_ROOT/dotnet tool install dotnet-sonarscanner --tool-path . --version 5.2.0
          apt update
          apt install -y openjdk-11-jre-headless

      # Builds dontnet solution of project for SonarCloud analysis
      - name: Generate Solution
        run: unity-editor -nographics -logFile /dev/stdout -customBuildName Unity-Template -projectPath Unity-Template -executeMethod  UnityEditor.SyncVS.SyncSolution -quit

      # Run SonarCloud Analysis (linting, test coverage, and code duplication = QualityGate) using basic dotnet rule-set
      - name: SonarCloud Analysis
        env:
          FrameworkPathOverride: /opt/unity/Editor/Data/MonoBleedingEdge/
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -l
          ./dotnet-sonarscanner begin \
            /k:"JohnMurwin_Unity-Template" \
            /o:"johnmurwin" \
            /d:sonar.verbose=false \
            /d:sonar.login=$SONAR_TOKEN \
            /d:sonar.host.url=https://sonarcloud.io \
            /d:sonar.exclusions=Assets/Plugins/**,Assets/_Demo/**
          $DOTNET_ROOT/dotnet build Unity-Template/Unity-Template.sln
          ./dotnet-sonarscanner end /d:sonar.login=$SONAR_TOKEN

